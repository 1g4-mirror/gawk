typedef struct { char *t_name; int t_val; } yytoktype;
#ifndef YYDEBUG
#	define YYDEBUG	0	/* don't allow debugging */
#endif

#if YYDEBUG

yytoktype yytoks[] =
{
	"FUNC_CALL",	257,
	"NAME",	258,
	"REGEXP",	259,
	"YSTRING",	260,
	"ERROR",	261,
	"INCDEC",	262,
	"NUMBER",	263,
	"RELOP",	264,
	"APPEND_OP",	265,
	"ASSIGNOP",	266,
	"MATCHOP",	267,
	"NEWLINE",	268,
	"CONCAT_OP",	269,
	"LEX_BEGIN",	270,
	"LEX_END",	271,
	"LEX_IF",	272,
	"LEX_ELSE",	273,
	"LEX_RETURN",	274,
	"LEX_DELETE",	275,
	"LEX_WHILE",	276,
	"LEX_DO",	277,
	"LEX_FOR",	278,
	"LEX_BREAK",	279,
	"LEX_CONTINUE",	280,
	"LEX_PRINT",	281,
	"LEX_PRINTF",	282,
	"LEX_NEXT",	283,
	"LEX_EXIT",	284,
	"LEX_FUNCTION",	285,
	"LEX_GETLINE",	286,
	"LEX_SUB",	287,
	"LEX_MATCH",	288,
	"LEX_IN",	289,
	"LEX_AND",	290,
	"LEX_OR",	291,
	"INCREMENT",	292,
	"DECREMENT",	293,
	"LEX_BUILTIN",	294,
	"?",	63,
	":",	58,
	"<",	60,
	">",	62,
	"|",	124,
	"(",	40,
	")",	41,
	"+",	43,
	"-",	45,
	"*",	42,
	"/",	47,
	"%",	37,
	"!",	33,
	"UNARY",	295,
	"^",	94,
	"$",	36,
	"-unknown-",	-1	/* ends search */
};

char * yyreds[] =
{
	"-no such reduction-",
	"start : opt_nls program",
	"program : rule",
	"program : program rule",
	"program : error",
	"program : program error",
	"rule : LEX_BEGIN action",
	"rule : LEX_END action",
	"rule : LEX_BEGIN statement_term",
	"rule : LEX_END statement_term",
	"rule : pattern action",
	"rule : action",
	"rule : pattern statement_term",
	"rule : function_prologue function_body",
	"func_name : NAME",
	"func_name : FUNC_CALL",
	"function_prologue : LEX_FUNCTION",
	"function_prologue : LEX_FUNCTION func_name '(' opt_param_list r_paren opt_nls",
	"function_body : l_brace statements r_brace",
	"simp_pattern : exp",
	"simp_pattern : p_regexp",
	"simp_pattern : p_regexp LEX_AND simp_pattern",
	"simp_pattern : p_regexp LEX_OR simp_pattern",
	"simp_pattern : '!' p_regexp",
	"simp_pattern : '(' p_regexp r_paren",
	"pattern : simp_pattern",
	"pattern : simp_pattern comma simp_pattern",
	"p_regexp : regexp",
	"regexp : '/'",
	"regexp : '/' REGEXP '/'",
	"action : l_brace r_brace opt_semi",
	"action : l_brace statements r_brace opt_semi",
	"statements : statement",
	"statements : statements statement",
	"statements : error",
	"statements : statements error",
	"statement_term : nls",
	"statement_term : semi opt_nls",
	"statement : semi opt_nls",
	"statement : l_brace statements r_brace",
	"statement : if_statement",
	"statement : LEX_WHILE '(' exp r_paren opt_nls statement",
	"statement : LEX_DO opt_nls statement LEX_WHILE '(' exp r_paren opt_nls",
	"statement : LEX_FOR '(' NAME LEX_IN NAME r_paren opt_nls statement",
	"statement : LEX_FOR '(' opt_exp semi exp semi opt_exp r_paren opt_nls statement",
	"statement : LEX_FOR '(' opt_exp semi semi opt_exp r_paren opt_nls statement",
	"statement : LEX_BREAK statement_term",
	"statement : LEX_CONTINUE statement_term",
	"statement : print '(' expression_list r_paren output_redir statement_term",
	"statement : print opt_rexpression_list output_redir statement_term",
	"statement : LEX_NEXT statement_term",
	"statement : LEX_EXIT opt_exp statement_term",
	"statement : LEX_RETURN opt_exp statement_term",
	"statement : LEX_DELETE NAME '[' expression_list ']' statement_term",
	"statement : exp statement_term",
	"print : LEX_PRINT",
	"print : LEX_PRINTF",
	"if_statement : LEX_IF '(' exp r_paren opt_nls statement",
	"if_statement : LEX_IF '(' exp r_paren opt_nls statement LEX_ELSE opt_nls statement",
	"nls : NEWLINE",
	"nls : nls NEWLINE",
	"opt_nls : /* empty */",
	"opt_nls : nls",
	"input_redir : /* empty */",
	"input_redir : '<' simp_exp",
	"output_redir : /* empty */",
	"output_redir : '>' simp_exp",
	"output_redir : APPEND_OP simp_exp",
	"output_redir : '|' simp_exp",
	"opt_param_list : /* empty */",
	"opt_param_list : param_list",
	"param_list : NAME",
	"param_list : param_list comma NAME",
	"param_list : error",
	"param_list : param_list error",
	"param_list : param_list comma error",
	"opt_exp : /* empty */",
	"opt_exp : exp",
	"opt_rexpression_list : /* empty */",
	"opt_rexpression_list : rexpression_list",
	"rexpression_list : rexp",
	"rexpression_list : rexpression_list comma rexp",
	"rexpression_list : error",
	"rexpression_list : rexpression_list error",
	"rexpression_list : rexpression_list error rexp",
	"rexpression_list : rexpression_list comma error",
	"opt_expression_list : /* empty */",
	"opt_expression_list : expression_list",
	"expression_list : exp",
	"expression_list : expression_list comma exp",
	"expression_list : error",
	"expression_list : expression_list error",
	"expression_list : expression_list error exp",
	"expression_list : expression_list comma error",
	"exp : variable ASSIGNOP exp",
	"exp : '(' expression_list r_paren LEX_IN NAME",
	"exp : exp '|' LEX_GETLINE opt_variable",
	"exp : LEX_GETLINE opt_variable input_redir",
	"exp : exp LEX_AND exp",
	"exp : exp LEX_OR exp",
	"exp : exp MATCHOP regexp",
	"exp : exp MATCHOP exp",
	"exp : exp LEX_IN NAME",
	"exp : exp RELOP exp",
	"exp : exp '<' exp",
	"exp : exp '>' exp",
	"exp : exp '?' exp ':' exp",
	"exp : exp exp",
	"exp : simp_exp",
	"rexp : variable ASSIGNOP rexp",
	"rexp : rexp LEX_AND rexp",
	"rexp : rexp LEX_OR rexp",
	"rexp : LEX_GETLINE opt_variable input_redir",
	"rexp : rexp MATCHOP regexp",
	"rexp : rexp MATCHOP rexp",
	"rexp : rexp LEX_IN NAME",
	"rexp : rexp RELOP rexp",
	"rexp : rexp '?' rexp ':' rexp",
	"rexp : rexp rexp",
	"rexp : simp_exp",
	"simp_exp : '!' simp_exp",
	"simp_exp : '(' exp r_paren",
	"simp_exp : LEX_BUILTIN '(' opt_expression_list r_paren",
	"simp_exp : LEX_BUILTIN",
	"simp_exp : LEX_SUB '(' regexp comma expression_list r_paren",
	"simp_exp : LEX_SUB '(' exp comma expression_list r_paren",
	"simp_exp : LEX_MATCH '(' exp comma regexp r_paren",
	"simp_exp : LEX_MATCH '(' exp comma exp r_paren",
	"simp_exp : FUNC_CALL '(' opt_expression_list r_paren",
	"simp_exp : INCREMENT variable",
	"simp_exp : DECREMENT variable",
	"simp_exp : variable INCREMENT",
	"simp_exp : variable DECREMENT",
	"simp_exp : variable",
	"simp_exp : NUMBER",
	"simp_exp : YSTRING",
	"simp_exp : simp_exp '^' simp_exp",
	"simp_exp : simp_exp '*' simp_exp",
	"simp_exp : simp_exp '/' simp_exp",
	"simp_exp : simp_exp '%' simp_exp",
	"simp_exp : simp_exp '+' simp_exp",
	"simp_exp : simp_exp '-' simp_exp",
	"simp_exp : '-' simp_exp",
	"simp_exp : '+' simp_exp",
	"opt_variable : /* empty */",
	"opt_variable : variable",
	"variable : NAME",
	"variable : NAME '[' expression_list ']'",
	"variable : '$' simp_exp",
	"l_brace : '{' opt_nls",
	"r_brace : '}' opt_nls",
	"r_paren : ')'",
	"opt_semi : /* empty */",
	"opt_semi : semi",
	"semi : ';'",
	"comma : ',' opt_nls",
};
#endif /* YYDEBUG */
